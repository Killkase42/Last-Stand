import pygame


#Initialize Pygame.
pygame.init()


#Create screen.
screen = pygame.display.set_mode((1728, 972))


clock = pygame.time.Clock()


#Title and Icon
pygame.display.set_caption('Last Stand')
icon = pygame.image.load('icon.png')
pygame.display.set_icon(icon)


#Colours
white = (255, 255, 255)
black = (0, 0, 0)
orange = (225, 98, 0)
lightOrange = (245, 118, 0)


#Displaying text in various colours.
def textObjectsBlack(text, font):
    textSurface = font.render(text, True, black)
    return textSurface, textSurface.get_rect()

def textObjectsWhite(text, font):
    textSurface = font.render(text, True, white)
    return textSurface, textSurface.get_rect()

def printWhiteText(text, size, x, y ):
    descriptionText = pygame.font.Font('freesansbold.ttf', size)
    textSurf, textRect = textObjectsWhite(text, descriptionText)
    textRect.center = (x, y)
    screen.blit(textSurf, textRect)


#Battle button needs a separate function due to its shape and function.
def battleButton(action=None):
    mouse = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()
    if 968 > mouse[0] > 770 and 73 > mouse[1] > 13:
        pygame.draw.rect(screen, lightOrange, [784, 13, 170, 60])
        pygame.draw.rect(screen, lightOrange, [770, 13, 7, 60])
        pygame.draw.rect(screen, lightOrange, [961, 13, 7, 60])
        if click[0] == 1 and action != None:
            if action == "play":
                confirmationScreen()

    # add sound later
    else:
        pygame.draw.rect(screen, orange, [784, 13, 170, 60])
        pygame.draw.rect(screen, orange, [770, 13, 7, 60])
        pygame.draw.rect(screen, orange, [961, 13, 7, 60])
    battleText = pygame.font.Font('freesansbold.ttf', 40)
    textSurf, textRect = textObjectsBlack('BATTLE', battleText)
    textRect.center = (869, 43)
    screen.blit(textSurf, textRect)


#The large button with picture, enters player into the game.
def enterGameButton(action=None):
    enterGameButton = pygame.image.load('lastStand.png')
    enterGameButtonX = 502
    enterGameButtonY = 180

    mouse = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()
    if 1226 > mouse[0] > 502 and 488 > mouse[1] > 180:
        pygame.draw.rect(screen, orange, [500, 178, 728, 312])
        screen.blit(enterGameButton, (enterGameButtonX, enterGameButtonY))
        if click[0] == 1 and action != None:
            if action == "play":
                gameLoop()

    # add sound later
    else:
        screen.blit(enterGameButton, (enterGameButtonX, enterGameButtonY))


#General function for all rectangular buttons.
def buttonFunc(message, x, y, w, h, inactive, active, textSize):
    if x + w > mouse[0] > x and y + h > mouse[1] > y:
        pygame.draw.rect(screen, active, (x, y, w, h))
    else:
        pygame.draw.rect(screen, inactive, (x, y, w, h))

    largeText = pygame.font.Font('freesansbold.ttf', textSize)
    textSurf, textRect = textObjects(message, largeText)
    textRect.center = ( (x + (w / 2)), (y + (h / 2)) )
    screen.blit(textSurf, textRect)


#Selected ships.
fleetSlotOne = 'Pioneer'
fleetSlotTwo = 'Colossus'
fleetSlotThree = 'Venturer'


#Menu screen.
def gameMenu():
    menu = True

    while menu:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        screen.fill(black)

        #Drawing upper background (behind battle button).
        upperBackground = pygame.image.load('upperBackground.png')
        upperBackgroundX = 0
        upperBackgroundY = 0

        screen.blit(upperBackground, (upperBackgroundX, upperBackgroundY))

        # Backgrounds behind selectable ships.
        Background = pygame.image.load('shipSelectionBackground.png')
        screen.blit(Background, (17, 810))
        screen.blit(Background, (304, 810))
        screen.blit(Background, (585, 810))
        screen.blit(Background, (867, 810))
        screen.blit(Background, (1150, 810))
        screen.blit(Background, (1436, 810))

        #Logos on top of backgrounds.
        logoUSR = pygame.image.load('logoUSR.png')
        screen.blit(logoUSR, (45, 830))
        screen.blit(logoUSR, (335, 830))

        logoZRK = pygame.image.load('logoZRK.png')
        screen.blit(logoZRK, (615, 830))

        battleButton("play")


        pygame.display.update()
        clock.tick(60)

#Main loop.

def confirmationScreen():
    confirmation = True

    while confirmation:

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        confirmationBackground = pygame.image.load('confirmationBackground.png')
        confirmationBackgroundX = 0
        confirmationBackgroundY = 90

        screen.blit(confirmationBackground, (confirmationBackgroundX, confirmationBackgroundY))

        descriptionText = pygame.font.Font('freesansbold.ttf', 40)
        textSurf, textRect = textObjectsWhite('Add a description  of the game here.', descriptionText)
        textRect.center = (869, 600)
        screen.blit(textSurf, textRect)

        battleButton("play")
        enterGameButton("play")

        pygame.display.update()
    clock.tick(60)


#General HUD appearance.
def displayHUD():
    #The circular backgrounds of abilities and pictures of abilities the same for every ship.
    abilityBackground = pygame.image.load('Frame-fade.png')
    screen.blit(abilityBackground, (772, 830))
    screen.blit(abilityBackground, (660, 830))
    screen.blit(abilityBackground, (548, 830))
    screen.blit(abilityBackground, (884, 830))
    screen.blit(abilityBackground, (996, 830))
    screen.blit(abilityBackground, (1108, 830))

    pointDefenseSkill = pygame.image.load('pointDefense.png')
    screen.blit(pointDefenseSkill, (783, 841))

    warpSkill = pygame.image.load('warp.png')
    screen.blit(warpSkill, (895, 841))
    screen.blit(warpSkill, (1007, 841))

    #The numbers, signifying which key to press to activate each ability, above each ability.
    printWhiteText('1', 12, 583, 820)
    printWhiteText('2', 12, 695, 820)
    printWhiteText('3', 12, 807, 820)
    printWhiteText('(Tab)', 12, 919, 820)
    printWhiteText('4', 12, 1031, 820)
    printWhiteText('(LMB)', 12, 1143, 820)

    #The names of default abilities (point defense, jump drive, jump home).
    printWhiteText('Point Defense', 12, 807, 915)
    printWhiteText('Jump Drive', 12, 919, 915)
    printWhiteText('Jump Home', 12, 1031, 915)

    #Minimap background.
    sector = pygame.image.load('sector.png')
    screen.blit(sector, (1280, 700))
    screen.blit(sector, (1404, 700))
    screen.blit(sector, (1528, 700))

    outpostSector = pygame.image.load('outpostSector.png')
    screen.blit(outpostSector, (1384, 830))

    printWhiteText('Alpha', 18, 1330, 687)
    printWhiteText('Delta', 18, 1453, 687)
    printWhiteText('Beta', 18, 1575, 687)
    printWhiteText('Outpost', 18, 1450, 817)


    #Combat log.
    printWhiteText('Combat Log:', 18, 100, 700)


    #Background to base/turret health indicator at top of screen.
    baseDisplay = pygame.image.load('baseDisplay.png')
    screen.blit(baseDisplay, (499, 25))




#How each wave will work.



def gameLoop():
    gameRunning = True

    selectedSlot = 1

    #Health of player's ships (values will change depending on ships selected).
    slotOneShipHealth = 0
    slotTwoShipHealth = 0
    slotThreeShipHealth = 0


    #Health of enemy ships (values will change depending on enemies on screen).
    enemyOneHealth = 0
    enemyTwoHealth = 0
    enemyThreeHealth = 0
    enemyFourHealth = 0
    enemyFiveHealth = 0
    enemySixHealth = 0

    #Aspects of the enemy.
    selectedEnemyHealth = 0

    while gameRunning:


        #Player input loop.
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT and selectedSlot == 1:
                    selectedSlot = 3
                elif event.key == pygame.K_LEFT and selectedSlot == 3:
                    selectedSlot = 2
                elif event.key == pygame.K_LEFT and selectedSlot == 2:
                    selectedSlot = 1
                elif event.key == pygame.K_RIGHT and selectedSlot == 1:
                    selectedSlot = 2
                elif event.key == pygame.K_RIGHT and selectedSlot == 2:
                    selectedSlot = 3
                elif event.key == pygame.K_RIGHT and selectedSlot == 3:
                    selectedSlot = 1




        screen.fill(black)

        # What will happen if a certain fleet ship is selected.
        # For the Pioneer.
        if fleetSlotOne == 'Pioneer' and selectedSlot == 1 or fleetSlotTwo == 'Pioneer' and selectedSlot == 2 or fleetSlotThree == 'Pioneer' and selectedSlot == 3:
            printWhiteText('pioneer selected', 50, 500, 250)
            printWhiteText('Reveal Sector', 12, 583, 915)
            printWhiteText('Pioneer Missiles', 12, 695, 915)
            printWhiteText('Void Charges', 12, 1143, 915)

            #Change below display bars to match up with all ship spots!!!!!!!!!!
            if fleetSlotOne == 'Pioneer':
                pygame.draw.rect(screen, orange, [265, 615, 250, 25])
            elif fleetSlotTwo == 'Pioneer':
                pygame.draw.rect(screen, orange, [725, 735, 250, 25])
            elif fleetSlotThree == 'Pioneer':
                pygame.draw.rect(screen, orange, [265, 615, 250, 25])

        # For the Colossus.
        if fleetSlotOne == 'Colossus' and selectedSlot == 1 or fleetSlotTwo == 'Colossus' and selectedSlot == 2 or fleetSlotThree == 'Colossus' and selectedSlot == 3:
            printWhiteText('colossus selected', 50, 500, 250)
            if fleetSlotOne == 'Colossus':
                pygame.draw.rect(screen, orange, [265, 615, 250, 25])
            elif fleetSlotTwo == 'Colossus':
                pygame.draw.rect(screen, orange, [725, 735, 250, 25])
            elif fleetSlotThree == 'Colossus':
                pygame.draw.rect(screen, orange, [265, 615, 250, 25])

        # For the Venturer.
        if fleetSlotOne == 'Venturer' and selectedSlot == 1 or fleetSlotTwo == 'Venturer' and selectedSlot == 2 or fleetSlotThree == 'Venturer' and selectedSlot == 3:
            printWhiteText('venturer selected', 50, 500, 250)
            if fleetSlotOne == 'Venturer':
                pygame.draw.rect(screen, orange, [265, 615, 250, 25])
            elif fleetSlotTwo == 'Venturer':
                pygame.draw.rect(screen, orange, [725, 735, 250, 25])
            elif fleetSlotThree == 'Venturer':
                pygame.draw.rect(screen, orange, [1050, 615, 250, 25])

        printWhiteText(str(selectedSlot) + ',', 50, 250, 250)


        #Deciding how to draw player ships.
        if fleetSlotOne == 'Pioneer':
            pioneerInGameDisplay = pygame.image.load('pioneerInGame.png')
            screen.blit(pioneerInGameDisplay, (250, 450))

        if fleetSlotTwo == 'Colossus':
            colossusInGameDisplay = pygame.image.load('colossusInGame.png')
            screen.blit(colossusInGameDisplay, (689, 575))

        if fleetSlotThree == 'Venturer':
            venturerInGameDisplay = pygame.image.load('venturerInGame.png')
            screen.blit(venturerInGameDisplay, (1000, 460))









        displayHUD()


        pygame.display.update()
        clock.tick(60)

gameMenu()
confirmationScreen()
gameLoop()
pygame.quit()
quit()
